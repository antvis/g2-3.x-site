{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-0-10-46-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/en/examples/map/map","result":{"data":{"site":{"siteMetadata":{"title":"G2","githubUrl":"https://github.com/antvis/g2","examples":[{"slug":"gallery","icon":"gallery","title":{"zh":"官方精品库","en":"Featured"}},{"slug":"line","icon":"line","title":{"zh":"折线图","en":"Line Chart"}},{"slug":"column","icon":"column","title":{"zh":"柱状图","en":"Column Chart"}},{"slug":"bar","icon":"bar","title":{"zh":"条形图","en":"Bar Chart"}},{"slug":"pie","icon":"pie","title":{"zh":"饼图","en":"Pie Chart"}},{"slug":"point","icon":"point","title":{"zh":"点图","en":"Point Chart"}},{"slug":"area","icon":"area","title":{"zh":"面积图","en":"Area Chart"}},{"slug":"box","icon":"box","title":{"zh":"箱型图","en":"Box Chart"}},{"slug":"candlestick","icon":"candlestick","title":{"zh":"烛形图","en":"K Chart"}},{"slug":"heatmap","icon":"heatmap","title":{"zh":"热力图","en":"Heatmap"}},{"slug":"gauge","icon":"gauge","title":{"zh":"仪表盘","en":"Gauges"}},{"slug":"funnel","icon":"funnel","title":{"zh":"漏斗图","en":"Funnel Chart"}},{"slug":"map","icon":"map","title":{"zh":"地图","en":"Maps"}},{"slug":"radar","icon":"radar","title":{"zh":"雷达图","en":"Radar Chart"}},{"slug":"facet","icon":"facet","title":{"zh":"分面","en":"Facets"}},{"slug":"relation","icon":"relation","title":{"zh":"关系图","en":"Relation Chart"}},{"slug":"other","icon":"other","title":{"zh":"其他图表","en":"Other Chart"}},{"slug":"component","icon":"component","title":{"zh":"组件使用","en":"Chart Components"}}],"playground":{"container":null,"playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":null,"htmlCodeTemplate":"<!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"UTF-8\">\n            <title>{{title}}</title>\n          </head>\n          <body>\n            <div id=\"container\" />\n            <script src=\"https://gw.alipayobjects.com/os/antv/pkg/_antv.g2-3.5.11/dist/g2.min.js\"></script>\n            <script src=\"https://gw.alipayobjects.com/os/antv/pkg/_antv.data-set-0.10.2/dist/data-set.min.js\"></script>\n            <script>\n        {{code}}\n            </script>\n          </body>\n        </html>"}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"html":"","fields":{"slug":"/en/examples/gallery"},"frontmatter":{"title":"Gallery","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery"},"frontmatter":{"title":"所有图表","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/relation/relation"},"frontmatter":{"title":"Graph","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"relation/relation/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/radar/radar"},"frontmatter":{"title":"Radar Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"radar/radar/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/relation/relation"},"frontmatter":{"title":"关系图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"relation/relation/index.zh.md"}}},{"node":{"html":"<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>雷达图是以相同点开始的轴上表示的三个或更多个定量变量的二维图形的形式显示多变量数据的图形方法。轴的相对位置和角度通常是不知情的。</p>","fields":{"slug":"/zh/examples/radar/radar"},"frontmatter":{"title":"雷达图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"radar/radar/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/point/scatter"},"frontmatter":{"title":"Scatter Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"point/scatter/index.en.md"}}},{"node":{"html":"<p>Scatter Chart，也叫 X-Y 图，它将所有的数据以点的形式展现在笛卡尔坐标系上，以显示变量之间的相互影响程度，点的位置由变量的数值决定。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>通过观察散点图上数据点的分布情况，我们可以推断出变量间的相关性。如果变量之间不存在相互关系，那么在散点图上就会表现为随机分布的离散的点，如果存在某种相关性，那么大部分的数据点就会相对密集并以某种趋势呈现。数据的相关关系主要分为：正相关（两个变量值同时增长）、负相关（一个变量值增加另一个变量值下降）、不相关、线性相关、指数相关等，表现在散点图上的大致分布如下图所示。那些离点集群较远的点我们称为离群点或者异常点。</p>","fields":{"slug":"/zh/examples/point/scatter"},"frontmatter":{"title":"散点图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"point/scatter/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/other/other"},"frontmatter":{"title":"Others","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"other/other/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/other/other"},"frontmatter":{"title":"其他图表","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"other/other/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/pie/basic"},"frontmatter":{"title":"Basic Pie Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"pie/basic/index.en.md"}}},{"node":{"html":"<p>饼图广泛得应用在各个领域，用于表示不同分类的占比情况，通过弧度大小来对比各种分类。饼图通过将一个圆饼按照分类的占比划分成多个区块，整个圆饼代表数据的总量，每个区块（圆弧）表示该分类占总体的比例大小，所有区块（圆弧）的加和等于 100%。可以很好地帮助用户快速了解数据的占比分配。</p>","fields":{"slug":"/zh/examples/pie/basic"},"frontmatter":{"title":"基础饼图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"pie/basic/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/map/map"},"frontmatter":{"title":"地图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"map/map/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/map/map"},"frontmatter":{"title":"Map","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"map/map/index.en.md"}}},{"node":{"html":"<p>Basic Line Chart，基础折线图。折线图用于显示数据在一个连续的时间间隔或者时间跨度上的变化，它的特点是反映事物随时间或有序类别而变化的趋势。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>在折线图中，数据是递增还是递减、增减的速率、增减的规律（周期性、螺旋性等）、峰值等特征都可以清晰地反映出来。所以，折线图常用来分析数据随时间的变化趋势，也可用来分析多组数据随时间变化的相互作用和相互影响。例如可用来分析某类商品或是某几类相关的商品随时间变化的销售情况，从而进一步预测未来的销售情况。在折线图中，一般水平轴（X轴）用来表示时间的推移，并且间隔相同；而垂直轴（Y轴）代表不同时刻的数据的大小。</p>","fields":{"slug":"/zh/examples/line/basic"},"frontmatter":{"title":"基础折线图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"line/basic/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/line/basic"},"frontmatter":{"title":"Line Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"line/basic/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/heatmap/heatmap"},"frontmatter":{"title":"Heatmap","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"heatmap/heatmap/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gauge/gauge"},"frontmatter":{"title":"Gauge","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gauge/gauge/index.en.md"}}},{"node":{"html":"<p>热力图，由小色块有序且紧凑的组成的图表。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>特别适合用于直接对数据量较大的、相对原始的数据进行分析。比如：生物基因科学领域，色块图常被用于微阵列数据分析。</p>","fields":{"slug":"/zh/examples/heatmap/heatmap"},"frontmatter":{"title":"热力图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"heatmap/heatmap/index.zh.md"}}},{"node":{"html":"<h2 id=\"如何使用\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\" aria-label=\"如何使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用</h2>\n<p>仪表盘(Gauge)是一种拟物化的图表，刻度表示度量，指针表示维度，指针角度表示数值。仪表盘图表就像汽车的速度表一样，有一个圆形的表盘及相应的刻度，有一个指针指向当前数值。目前很多的管理报表或报告上都是用这种图表，以直观的表现出某个指标的进度或实际情况。仪表盘的好处在于它能跟人们的常识结合，使大家马上能理解看什么、怎么看。拟物化的方式使图标变得更友好更人性化，正确使用可以提升用户体验。</p>","fields":{"slug":"/zh/examples/gauge/gauge"},"frontmatter":{"title":"仪表盘","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gauge/gauge/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/facet/facet"},"frontmatter":{"title":"分面","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"facet/facet/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/facet/facet"},"frontmatter":{"title":"Facet","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"facet/facet/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gallery/line"},"frontmatter":{"title":"Line Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/line/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery/line"},"frontmatter":{"title":"折线图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/line/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/funnel/funnel"},"frontmatter":{"title":"Funnel Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"funnel/funnel/index.en.md"}}},{"node":{"html":"<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>漏斗图适用于业务流程比较规范、周期长、环节多的单流程单向分析，通过漏斗各环节业务数据的比较能够直观地发现和说明问题所在的环节，进而做出决策。漏斗图用梯形面积表示某个环节业务量与上一个环节之间的差异。漏斗图从上到下，有逻辑上的顺序关系，表现了随着业务流程的推进业务目标完成的情况。</p>","fields":{"slug":"/zh/examples/funnel/funnel"},"frontmatter":{"title":"漏斗图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"funnel/funnel/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/component/component"},"frontmatter":{"title":"Chart Components","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"component/component/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/component/component"},"frontmatter":{"title":"图表组件","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"component/component/index.zh.md"}}},{"node":{"html":"<p>烛形图，原名 K 线图，蜡烛图，又称阴阳图、棒线、红黑线或蜡烛线，常用于展示股票交易数据。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>烛形图主要用于金融领域里展示股票，期货等交易数据，按照时间维度分为日 K 线、周 K 线、月 K 线。展示的数据需要满足 K 线构成的四要素：即开盘价、收盘价、最高价、最低价。</p>","fields":{"slug":"/zh/examples/candlestick/candlestick"},"frontmatter":{"title":"烛形图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"candlestick/candlestick/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/column/basic"},"frontmatter":{"title":"Basic Column Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"column/basic/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/candlestick/candlestick"},"frontmatter":{"title":"K Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"candlestick/candlestick/index.en.md"}}},{"node":{"html":"<p>基础柱状图，使用垂直的柱子显示类别之间的数值比较。其中一个轴表示需要对比的分类维度，另一个轴代表相应的数值。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>柱状图有别于直方图，柱状图无法显示数据在一个区间内的连续变化趋势。柱状图描述的是分类数据，回答的是每一个分类中“有多少？”这个问题。 需要注意的是，当柱状图显示的分类很多时会导致分类名层叠等显示问题。</p>","fields":{"slug":"/zh/examples/column/basic"},"frontmatter":{"title":"基础柱状图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"column/basic/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/box/box"},"frontmatter":{"title":"Box Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"box/box/index.en.md"}}},{"node":{"html":"<p>箱型图，又称盒须图、盒式图或箱线图，是一种用作显示一组数据分布情况的统计图。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>如果一个数据集中包含了一个分类变量和一个或者多个连续变量，那么你可能会想知道连续变量会如何随着分类变量水平的变化而变化，而箱形图就可以提供这种方法，它只用了5个数字对分布进行概括，即一组数据的最大值、最小值、中位数、下四分位数及上四分位数。对于数据集中的异常值，通常会以单独的点的形式绘制。箱形图可以水平或者垂直绘制。箱形图多用于数值统计，虽然相比于直方图和密度曲线较原始简单，但是它不需要占据过多的画布空间，空间利用率高，非常适用于比较多组数据的分布情况。</p>","fields":{"slug":"/zh/examples/box/box"},"frontmatter":{"title":"箱型图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"box/box/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/bar/basic"},"frontmatter":{"title":"Basic Bar Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"bar/basic/index.en.md"}}},{"node":{"html":"<p>使用水平的柱子显示类别之间的数值比较。其中一个轴表示需要对比的分类维度，另一个轴代表相应的数值。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>对比分类数据的数值大小，当分类情况过多时，柱状图的文本为了排布合理，需要进行旋转，不利于阅读，相比于纵向柱状图，横向柱状图更适用于此类分类较多的场景。</p>","fields":{"slug":"/zh/examples/bar/basic"},"frontmatter":{"title":"基础条形图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"bar/basic/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/area/basic"},"frontmatter":{"title":"Area Chart","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"area/basic/index.en.md"}}},{"node":{"html":"<p>面积图又叫区域图。 它是在折线图的基础之上形成的, 它将折线图中折线与自变量坐标轴之间的区域使用颜色或者纹理填充，这样一个填充区域我们叫做面积，颜色的填充可以更好的突出趋势信息。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>面积图用于强调数量随时间而变化的程度，也可用于引起人们对总值趋势的注意。他们最常用于表现趋势和关系,而不是传达特定的值。</p>","fields":{"slug":"/zh/examples/area/basic"},"frontmatter":{"title":"面积图","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"area/basic/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/pie/donut"},"frontmatter":{"title":"Donut Chart","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"pie/donut/index.en.md"}}},{"node":{"html":"<p>环图，其本质是饼图将中间区域挖空。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>饼图的整体性太强，我们会将注意力集中在比较饼图内各个扇形之间占整体比重的关系。但如果我们将两个饼图放在一起，饼图很难同时对比两个图。环图在解决上述问题时，采用了让我们更关注长度而不是面积的做法。这样我们就能相对简单的对比不同的环图。同时环图相对于饼图空间的利用率更高，比如我们可以使用它的空心区域显示文本信息，比如标题等。</p>","fields":{"slug":"/zh/examples/pie/donut"},"frontmatter":{"title":"环图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"pie/donut/index.zh.md"}}},{"node":{"html":"<p>双折线图。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>用于比对两组数据的趋势。</p>","fields":{"slug":"/zh/examples/line/double"},"frontmatter":{"title":"双折线图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"line/double/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/line/double"},"frontmatter":{"title":"Double Line Chart","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"line/double/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery/column"},"frontmatter":{"title":"柱状图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/column/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gallery/column"},"frontmatter":{"title":"Column Chart","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/column/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/column/dodge"},"frontmatter":{"title":"Grouped Column Chart","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"column/dodge/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/column/dodge"},"frontmatter":{"title":"分组柱状图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"column/dodge/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/bar/dodge"},"frontmatter":{"title":"Grouped Bar Chart","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"bar/dodge/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/bar/dodge"},"frontmatter":{"title":"分组条形图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"bar/dodge/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/area/stacked"},"frontmatter":{"title":"Stacked Area Chart","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"area/stacked/index.en.md"}}},{"node":{"html":"<p>和基本面积图一样，唯一的区别就是图上每一个数据集的起点不同，起点是基于前一个数据集的，用于显示每个数值所占大小随时间或类别变化的趋势线，展示的是部分与整体的关系。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>层叠面积图上的最大的面积代表了所有的数据量的总和，是一个整体。各个叠起来的面积表示各个数据量的大小，这些堆叠起来的面积图在表现大数据的总量分量的变化情况时格外有用，所以层叠面积图不适用于表示带有负值的数据集。非常适用于对比多变量随时间变化的情况。</p>","fields":{"slug":"/zh/examples/area/stacked"},"frontmatter":{"title":"堆叠面积图","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"area/stacked/index.zh.md"}}},{"node":{"html":"<p>南丁格尔玫瑰图，又名鸡冠花图、极坐标区域图，是南丁格尔在克里米亚战争期间提交的一份关于士兵死伤的报告时发明的一种图表,是在极坐标下绘制的柱状图，使用圆弧的半径长短表示数据的大小（数量的多少）。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>由于半径和面积的关系是平方的关系，南丁格尔玫瑰图会将数据的比例大小夸大，尤其适合对比大小相近的数值；由于圆形有周期的特性，所以玫瑰图也适用于表示一个周期内的时间概念，比如星期、月份。</p>","fields":{"slug":"/zh/examples/pie/rose"},"frontmatter":{"title":"南丁格尔玫瑰图","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"pie/rose/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/pie/rose"},"frontmatter":{"title":"Nightingale Rose Chart","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"pie/rose/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/line/multiple"},"frontmatter":{"title":"multiple line chart","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"line/multiple/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/line/multiple"},"frontmatter":{"title":"多折线图","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"line/multiple/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gallery/bar"},"frontmatter":{"title":"Bar Chart","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/bar/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery/bar"},"frontmatter":{"title":"条形图","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/bar/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/column/stack"},"frontmatter":{"title":"Stacked Column Chart","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"column/stack/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/column/stack"},"frontmatter":{"title":"堆叠柱状图","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"column/stack/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/bar/stack"},"frontmatter":{"title":"堆叠条形图","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"bar/stack/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/bar/stack"},"frontmatter":{"title":"Stacked Bar Chart","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"bar/stack/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/area/range"},"frontmatter":{"title":"Range Area Chart","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"area/range/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/area/range"},"frontmatter":{"title":"区间面积图","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"area/range/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/pie/nested"},"frontmatter":{"title":"嵌套饼图","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"pie/nested/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/pie/nested"},"frontmatter":{"title":"Nested Pie Chart","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"pie/nested/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/line/step"},"frontmatter":{"title":"Step Line Chart","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"line/step/index.en.md"}}},{"node":{"html":"<p>阶梯线图（也称为步骤图）是与线图相似的​​图表，但是线在数据点之间形成一系列步骤。当您要显示以不规则间隔发生的更改时，分阶线图可能很有用。例如，奶制品价格上涨，汽油，税率，利率等。</p>","fields":{"slug":"/zh/examples/line/step"},"frontmatter":{"title":"阶梯折线图","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"line/step/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gallery/pie"},"frontmatter":{"title":"Pie Chart","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/pie/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery/pie"},"frontmatter":{"title":"饼图","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/pie/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/column/histogram"},"frontmatter":{"title":"Histogram","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"column/histogram/index.en.md"}}},{"node":{"html":"<p>直方图牵涉统计学的概念，首先要对数据进行分组，然后统计每个分组内数据元的数量。 在平面直角坐标系中，横轴标出每个组的端点，纵轴表示频数，每个矩形的高代表对应的频数，称这样的统计图为频数分布直方图。频数分布直方图需要经过频数乘以组距的计算过程才能得出每个分组的数量，同一个直方图的组距是一个固定不变的值，所以如果直接用纵轴表示数量，每个矩形的高代表对应的数据元数量，既能保持分布状态不变，又能直观的看出每个分组的数量。</p>\n<h2 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h2>\n<p>直方图主要用于显示各组频数或数量分布的情况以及各组之间频数或数量的差别，通过直方图还可以观察和估计哪些数据比较集中，异常或者孤立的数据分布在何处。</p>","fields":{"slug":"/zh/examples/column/histogram"},"frontmatter":{"title":"直方图","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"column/histogram/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gallery/area"},"frontmatter":{"title":"Area Chart","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/area/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery/area"},"frontmatter":{"title":"面积图","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/area/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gallery/gauge"},"frontmatter":{"title":"Gauge","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/gauge/index.en.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery/gauge"},"frontmatter":{"title":"仪表盘","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/gauge/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/zh/examples/gallery/facet"},"frontmatter":{"title":"分面","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/facet/index.zh.md"}}},{"node":{"html":"","fields":{"slug":"/en/examples/gallery/facet"},"frontmatter":{"title":"Facet","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"gallery/facet/index.en.md"}}}]}},"pageContext":{"exampleSections":{"examples":[{"relativePath":"map/map/demo/bubble-map.js","absolutePath":"/Users/weixingzhang/workspace/AntV/G2-v4.0/g2-v3/3.5/examples/map/map/demo/bubble-map.js","order":0,"filename":"bubble-map.js","title":{"zh":"带气泡的地图","en":"Bubble Map"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*BvfoQouf81sAAAAAAAAAAABkARQnAQ","source":"// 数据来源于 https://github.com/react-d3/react-d3-map-bubble\nfetch('../data/world.geo.json')\n  .then(res => res.json())\n  .then(mapData => {\n    fetch('../data/earthquake.json')\n      .then(res => res.json())\n      .then(data => {\n\n        const chart = new G2.Chart({\n          container: 'container',\n          forceFit: true,\n          height: 500,\n          padding: [ 0, 20, 40 ]\n        });\n        // force sync scales\n        chart.scale({\n          x: { sync: true, nice: false },\n          y: { sync: true, nice: false }\n        });\n        chart.coord().reflect();\n        chart.legend(false);\n        chart.axis(false);\n\n        // style the tooltip\n        chart.tooltip({\n          showTitle: false,\n          containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n          itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#545454;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n          'g2-tooltip': {\n            borderRadius: '2px',\n            backgroundColor: '#DDDDDD',\n            padding: 0,\n            border: '1px solid #333'\n          }\n        });\n        // data set\n        const ds = new DataSet();\n\n        // draw the map\n        const dv = ds.createView('back')\n          .source(mapData, {\n            type: 'GeoJSON'\n          })\n          .transform({\n            type: 'geo.projection',\n            projection: 'geoMercator',\n            as: [ 'x', 'y', 'centroidX', 'centroidY' ]\n          });\n        const bgView = chart.view();\n        bgView.source(dv);\n        bgView.tooltip(false);\n        bgView.polygon()\n          .position('x*y')\n          .style({\n            fill: '#DDDDDD',\n            stroke: '#b1b1b1',\n            lineWidth: 0.5,\n            fillOpacity: 0.85\n          });\n\n        // draw the bubble plot\n        const userData = ds.createView().source(data);\n        userData.transform({\n          type: 'map',\n          callback: obj => {\n            const projectedCoord = dv.geoProjectPosition([ obj.lng * 1, obj.lat * 1 ], 'geoMercator');\n            obj.x = projectedCoord[0];\n            obj.y = projectedCoord[1];\n            obj.deaths = obj.deaths * 1;\n            obj.magnitude = obj.magnitude * 1;\n            return obj;\n          }\n        });\n        const pointView = chart.view();\n        pointView.source(userData);\n        pointView.point()\n          .position('x*y')\n          .size('deaths', [ 2, 30 ])\n          .shape('circle')\n          .opacity(0.45)\n          .color('#FF2F29')\n          .tooltip('date*location*lat*lng*deaths*magnitude');\n\n        chart.render();\n      });\n  });\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory();\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory();\n    global.bubbleMap = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function () {\n  \"use strict\";\n\n  // 数据来源于 https://github.com/react-d3/react-d3-map-bubble\n  fetch('../data/world.geo.json').then(function (res) {\n    return res.json();\n  }).then(function (mapData) {\n    fetch('../data/earthquake.json').then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      var chart = new G2.Chart({\n        container: 'container',\n        forceFit: true,\n        height: 500,\n        padding: [0, 20, 40]\n      }); // force sync scales\n\n      chart.scale({\n        x: {\n          sync: true,\n          nice: false\n        },\n        y: {\n          sync: true,\n          nice: false\n        }\n      });\n      chart.coord().reflect();\n      chart.legend(false);\n      chart.axis(false); // style the tooltip\n\n      chart.tooltip({\n        showTitle: false,\n        containerTpl: '<div class=\"g2-tooltip\"><table class=\"g2-tooltip-list\"></table></div>',\n        itemTpl: '<tr data-index=\"{index}\"><td style=\"padding:5px;background-color:#545454;\">{name}</td><td style=\"padding:5px;background-color:#fff;color:#000;\">{value}</td></tr>',\n        'g2-tooltip': {\n          borderRadius: '2px',\n          backgroundColor: '#DDDDDD',\n          padding: 0,\n          border: '1px solid #333'\n        }\n      }); // data set\n\n      var ds = new DataSet(); // draw the map\n\n      var dv = ds.createView('back').source(mapData, {\n        type: 'GeoJSON'\n      }).transform({\n        type: 'geo.projection',\n        projection: 'geoMercator',\n        as: ['x', 'y', 'centroidX', 'centroidY']\n      });\n      var bgView = chart.view();\n      bgView.source(dv);\n      bgView.tooltip(false);\n      bgView.polygon().position('x*y').style({\n        fill: '#DDDDDD',\n        stroke: '#b1b1b1',\n        lineWidth: 0.5,\n        fillOpacity: 0.85\n      }); // draw the bubble plot\n\n      var userData = ds.createView().source(data);\n      userData.transform({\n        type: 'map',\n        callback: function callback(obj) {\n          var projectedCoord = dv.geoProjectPosition([obj.lng * 1, obj.lat * 1], 'geoMercator');\n          obj.x = projectedCoord[0];\n          obj.y = projectedCoord[1];\n          obj.deaths = obj.deaths * 1;\n          obj.magnitude = obj.magnitude * 1;\n          return obj;\n        }\n      });\n      var pointView = chart.view();\n      pointView.source(userData);\n      pointView.point().position('x*y').size('deaths', [2, 30]).shape('circle').opacity(0.45).color('#FF2F29').tooltip('date*location*lat*lng*deaths*magnitude');\n      chart.render();\n    });\n  });\n});"},{"relativePath":"map/map/demo/choropleth-map.js","absolutePath":"/Users/weixingzhang/workspace/AntV/G2-v4.0/g2-v3/3.5/examples/map/map/demo/choropleth-map.js","order":1,"filename":"choropleth-map.js","title":{"zh":"世界分级统计地图","en":"Choropleth Map"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*TzmtTLXIxOEAAAAAAAAAAABkARQnAQ","source":"fetch('../data/world.geo.json')\n  .then(res => res.json())\n  .then(mapData => {\n    const chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      padding: [ 55, 20 ]\n    });\n    chart.tooltip({\n      showTitle: false\n    });\n    // 同步度量\n    chart.scale({\n      longitude: {\n        sync: true\n      },\n      latitude: {\n        sync: true\n      }\n    });\n    chart.axis(false);\n    chart.legend('trend', {\n      position: 'left'\n    });\n\n    // 绘制世界地图背景\n    const ds = new DataSet();\n    const worldMap = ds.createView('back')\n      .source(mapData, {\n        type: 'GeoJSON'\n      });\n    const worldMapView = chart.view();\n    worldMapView.source(worldMap);\n    worldMapView.tooltip(false);\n    worldMapView.polygon().position('longitude*latitude').style({\n      fill: '#fff',\n      stroke: '#ccc',\n      lineWidth: 1\n    });\n\n    // 可视化用户数据\n    const userData = [\n      { name: 'Russia', value: 86.8 },\n      { name: 'China', value: 106.3 },\n      { name: 'Japan', value: 94.7 },\n      { name: 'Mongolia', value: 98 },\n      { name: 'Canada', value: 98.4 },\n      { name: 'United Kingdom', value: 97.2 },\n      { name: 'United States of America', value: 98.3 },\n      { name: 'Brazil', value: 96.7 },\n      { name: 'Argentina', value: 95.8 },\n      { name: 'Algeria', value: 101.3 },\n      { name: 'France', value: 94.8 },\n      { name: 'Germany', value: 96.6 },\n      { name: 'Ukraine', value: 86.3 },\n      { name: 'Egypt', value: 102.1 },\n      { name: 'South Africa', value: 101.3 },\n      { name: 'India', value: 107.6 },\n      { name: 'Australia', value: 99.9 },\n      { name: 'Saudi Arabia', value: 130.1 },\n      { name: 'Afghanistan', value: 106.5 },\n      { name: 'Kazakhstan', value: 93.4 },\n      { name: 'Indonesia', value: 101.4 }\n    ];\n    const userDv = ds.createView()\n      .source(userData)\n      .transform({\n        geoDataView: worldMap,\n        field: 'name',\n        type: 'geo.region',\n        as: [ 'longitude', 'latitude' ]\n      })\n      .transform({\n        type: 'map',\n        callback: obj => {\n          obj.trend = (obj.value > 100) ? '男性更多' : '女性更多';\n          return obj;\n        }\n      });\n    const userView = chart.view();\n    userView.source(userDv, {\n      trend: {\n        alias: '每100位女性对应的男性数量'\n      }\n    });\n    userView.polygon()\n      .position('longitude*latitude')\n      .color('trend', [ '#F51D27', '#0A61D7' ])\n      .opacity('value')\n      .tooltip('name*trend')\n      .animate({\n        leave: {\n          animation: 'fadeOut'\n        }\n      });\n    chart.render();\n  });\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory();\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory();\n    global.choroplethMap = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function () {\n  \"use strict\";\n\n  fetch('../data/world.geo.json').then(function (res) {\n    return res.json();\n  }).then(function (mapData) {\n    var chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      padding: [55, 20]\n    });\n    chart.tooltip({\n      showTitle: false\n    }); // 同步度量\n\n    chart.scale({\n      longitude: {\n        sync: true\n      },\n      latitude: {\n        sync: true\n      }\n    });\n    chart.axis(false);\n    chart.legend('trend', {\n      position: 'left'\n    }); // 绘制世界地图背景\n\n    var ds = new DataSet();\n    var worldMap = ds.createView('back').source(mapData, {\n      type: 'GeoJSON'\n    });\n    var worldMapView = chart.view();\n    worldMapView.source(worldMap);\n    worldMapView.tooltip(false);\n    worldMapView.polygon().position('longitude*latitude').style({\n      fill: '#fff',\n      stroke: '#ccc',\n      lineWidth: 1\n    }); // 可视化用户数据\n\n    var userData = [{\n      name: 'Russia',\n      value: 86.8\n    }, {\n      name: 'China',\n      value: 106.3\n    }, {\n      name: 'Japan',\n      value: 94.7\n    }, {\n      name: 'Mongolia',\n      value: 98\n    }, {\n      name: 'Canada',\n      value: 98.4\n    }, {\n      name: 'United Kingdom',\n      value: 97.2\n    }, {\n      name: 'United States of America',\n      value: 98.3\n    }, {\n      name: 'Brazil',\n      value: 96.7\n    }, {\n      name: 'Argentina',\n      value: 95.8\n    }, {\n      name: 'Algeria',\n      value: 101.3\n    }, {\n      name: 'France',\n      value: 94.8\n    }, {\n      name: 'Germany',\n      value: 96.6\n    }, {\n      name: 'Ukraine',\n      value: 86.3\n    }, {\n      name: 'Egypt',\n      value: 102.1\n    }, {\n      name: 'South Africa',\n      value: 101.3\n    }, {\n      name: 'India',\n      value: 107.6\n    }, {\n      name: 'Australia',\n      value: 99.9\n    }, {\n      name: 'Saudi Arabia',\n      value: 130.1\n    }, {\n      name: 'Afghanistan',\n      value: 106.5\n    }, {\n      name: 'Kazakhstan',\n      value: 93.4\n    }, {\n      name: 'Indonesia',\n      value: 101.4\n    }];\n    var userDv = ds.createView().source(userData).transform({\n      geoDataView: worldMap,\n      field: 'name',\n      type: 'geo.region',\n      as: ['longitude', 'latitude']\n    }).transform({\n      type: 'map',\n      callback: function callback(obj) {\n        obj.trend = obj.value > 100 ? '男性更多' : '女性更多';\n        return obj;\n      }\n    });\n    var userView = chart.view();\n    userView.source(userDv, {\n      trend: {\n        alias: '每100位女性对应的男性数量'\n      }\n    });\n    userView.polygon().position('longitude*latitude').color('trend', ['#F51D27', '#0A61D7']).opacity('value').tooltip('name*trend').animate({\n      leave: {\n        animation: 'fadeOut'\n      }\n    });\n    chart.render();\n  });\n});"},{"relativePath":"map/map/demo/hex-choropleth-map.js","absolutePath":"/Users/weixingzhang/workspace/AntV/G2-v4.0/g2-v3/3.5/examples/map/map/demo/hex-choropleth-map.js","order":2,"filename":"hex-choropleth-map.js","title":{"zh":"六边形分箱示意地图","en":"Hexgin Choropleth"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*kr_LQqhKO70AAAAAAAAAAABkARQnAQ","source":"function addPoint(collection, point, count = 1) {\n  for (let i = 0; i < count; i++) {\n    collection.push(point);\n  }\n}\nfunction getCount(x, y, medianX, medianY) {\n  const distance = Math.pow((x - medianX), 2) + Math.pow((y - medianY), 2);\n  if (distance < 4) {\n    return 3;\n  } else if (distance < 16) {\n    return 3;\n  } else if (distance < 64) {\n    return 2;\n  }\n  return 1;\n}\nfetch('../data/china-provinces.geo.json')\n  .then(res => res.json())\n  .then(GeoJSON => {\n    const geoDv = new DataSet.View().source(GeoJSON, {\n      type: 'GeoJSON'\n    });\n    // console.log(GeoJSON);\n    const ranges = {\n      lat: geoDv.range('latitude'),\n      lon: geoDv.range('longitude')\n    };\n    const medians = {\n      lat: geoDv.median('latitude'),\n      lon: geoDv.median('longitude')\n    };\n\n    // console.log(ranges, medians);\n    const userData = [];\n    for (let lon = ranges.lon[0]; lon <= ranges.lon[1]; lon += 0.5) {\n      for (let lat = ranges.lat[0]; lat <= ranges.lat[1]; lat += 0.5) {\n        if (geoDv.geoContains(GeoJSON, [ lon, lat ])) {\n          addPoint(userData, {\n            latitude: lat,\n            longitude: lon\n          }, getCount(lon, lat, medians.lon, medians.lat));\n        }\n      }\n    }\n    // console.log(userData);\n    const userDv = new DataSet.View().source(userData).transform({\n      // sizeByCount: true,\n      type: 'bin.hexagon',\n      fields: [ 'longitude', 'latitude' ],\n      binWidth: [ 2, 3 ],\n      as: [ 'longitude', 'latitude', 'count' ]\n    });\n    // console.log(userDv);\n\n    const chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      padding: 0\n    });\n    chart.scale({\n      latitude: { sync: true, nice: false },\n      longitude: { sync: true, nice: false }\n    });\n    chart.legend(false);\n    chart.axis(false);\n    chart.tooltip(false);\n\n    const geoView = chart.view();\n    geoView.source(geoDv);\n    geoView.polygon()\n      .position('longitude*latitude')\n      .color('grey')\n      .opacity(0.3);\n\n    const userView = chart.view();\n    userView.source(userDv);\n    userView.polygon()\n      .position('longitude*latitude')\n      .color('count', '#BAE7FF-#1890FF-#0050B3')\n      .style({\n        lineWidth: 10,\n        stroke: 'white'\n      });\n    chart.render();\n  });\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory();\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory();\n    global.hexChoroplethMap = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function () {\n  \"use strict\";\n\n  function addPoint(collection, point) {\n    var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    for (var i = 0; i < count; i++) {\n      collection.push(point);\n    }\n  }\n\n  function getCount(x, y, medianX, medianY) {\n    var distance = Math.pow(x - medianX, 2) + Math.pow(y - medianY, 2);\n\n    if (distance < 4) {\n      return 3;\n    } else if (distance < 16) {\n      return 3;\n    } else if (distance < 64) {\n      return 2;\n    }\n\n    return 1;\n  }\n\n  fetch('../data/china-provinces.geo.json').then(function (res) {\n    return res.json();\n  }).then(function (GeoJSON) {\n    var geoDv = new DataSet.View().source(GeoJSON, {\n      type: 'GeoJSON'\n    }); // console.log(GeoJSON);\n\n    var ranges = {\n      lat: geoDv.range('latitude'),\n      lon: geoDv.range('longitude')\n    };\n    var medians = {\n      lat: geoDv.median('latitude'),\n      lon: geoDv.median('longitude')\n    }; // console.log(ranges, medians);\n\n    var userData = [];\n\n    for (var lon = ranges.lon[0]; lon <= ranges.lon[1]; lon += 0.5) {\n      for (var lat = ranges.lat[0]; lat <= ranges.lat[1]; lat += 0.5) {\n        if (geoDv.geoContains(GeoJSON, [lon, lat])) {\n          addPoint(userData, {\n            latitude: lat,\n            longitude: lon\n          }, getCount(lon, lat, medians.lon, medians.lat));\n        }\n      }\n    } // console.log(userData);\n\n\n    var userDv = new DataSet.View().source(userData).transform({\n      // sizeByCount: true,\n      type: 'bin.hexagon',\n      fields: ['longitude', 'latitude'],\n      binWidth: [2, 3],\n      as: ['longitude', 'latitude', 'count']\n    }); // console.log(userDv);\n\n    var chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      padding: 0\n    });\n    chart.scale({\n      latitude: {\n        sync: true,\n        nice: false\n      },\n      longitude: {\n        sync: true,\n        nice: false\n      }\n    });\n    chart.legend(false);\n    chart.axis(false);\n    chart.tooltip(false);\n    var geoView = chart.view();\n    geoView.source(geoDv);\n    geoView.polygon().position('longitude*latitude').color('grey').opacity(0.3);\n    var userView = chart.view();\n    userView.source(userDv);\n    userView.polygon().position('longitude*latitude').color('count', '#BAE7FF-#1890FF-#0050B3').style({\n      lineWidth: 10,\n      stroke: 'white'\n    });\n    chart.render();\n  });\n});"},{"relativePath":"map/map/demo/us-states-hex.js","absolutePath":"/Users/weixingzhang/workspace/AntV/G2-v4.0/g2-v3/3.5/examples/map/map/demo/us-states-hex.js","order":3,"filename":"us-states-hex.js","title":{"zh":"美国地图六边形分割","en":"Hexgin Choropleth"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*nWwESKCkDTgAAAAAAAAAAABkARQnAQ","source":"fetch('../data/us-states.hex.json')\n  .then(res => res.json())\n  .then(data => {\n    const dv = new DataSet.View().source(data, {\n      type: 'hex',\n      width: 100,\n      height: 100\n    });\n    const chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      padding: 500 / 24\n    });\n    chart.scale({\n      x: {\n        nice: false,\n        sync: true\n      },\n      y: {\n        nice: false,\n        sync: true\n      }\n    });\n    chart.coord().reflect(); // 视数据而定要不要翻转 Y 轴。\n    chart.tooltip({\n      showTitle: false\n    });\n    chart.axis(false);\n\n    const bgView = chart.view();\n    bgView.source(dv._gridRows);\n    bgView.polygon()\n      .position('x*y')\n      .color('grey')\n      .opacity(0.5)\n      .style({\n        stroke: 'white',\n        lineWidth: 1\n      })\n      .tooltip('key');\n\n    const mapView = chart.view();\n    mapView.source(dv);\n    mapView.polygon()\n      .position('x*y')\n      .color(G2.Global.colors[1])\n      .style({\n        stroke: 'white',\n        lineWidth: 5\n      })\n      .label('key', {\n        offset: 0,\n        textStyle: {\n          fontSize: 500 / 18,\n          fontWeight: 500\n        }\n      })\n      .tooltip('capital');\n\n    chart.render();\n  });\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory();\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory();\n    global.usStatesHex = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function () {\n  \"use strict\";\n\n  fetch('../data/us-states.hex.json').then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    var dv = new DataSet.View().source(data, {\n      type: 'hex',\n      width: 100,\n      height: 100\n    });\n    var chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      padding: 500 / 24\n    });\n    chart.scale({\n      x: {\n        nice: false,\n        sync: true\n      },\n      y: {\n        nice: false,\n        sync: true\n      }\n    });\n    chart.coord().reflect(); // 视数据而定要不要翻转 Y 轴。\n\n    chart.tooltip({\n      showTitle: false\n    });\n    chart.axis(false);\n    var bgView = chart.view();\n    bgView.source(dv._gridRows);\n    bgView.polygon().position('x*y').color('grey').opacity(0.5).style({\n      stroke: 'white',\n      lineWidth: 1\n    }).tooltip('key');\n    var mapView = chart.view();\n    mapView.source(dv);\n    mapView.polygon().position('x*y').color(G2.Global.colors[1]).style({\n      stroke: 'white',\n      lineWidth: 5\n    }).label('key', {\n      offset: 0,\n      textStyle: {\n        fontSize: 500 / 18,\n        fontWeight: 500\n      }\n    }).tooltip('capital');\n    chart.render();\n  });\n});"},{"relativePath":"map/map/demo/with-connection.js","absolutePath":"/Users/weixingzhang/workspace/AntV/G2-v4.0/g2-v3/3.5/examples/map/map/demo/with-connection.js","order":4,"filename":"with-connection.js","title":{"zh":"美国各个机场的航线图","en":"Bubble Map"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*ebqmQ6NIVXsAAAAAAAAAAABkARQnAQ","source":"fetch('../data/usa.geo.json')\n  .then(res => res.json())\n  .then(mapData => {\n    const map = [];\n    const features = mapData.features;\n    // 获取出所有的地图区域名称\n    for (let i = 0; i < features.length; i++) {\n      const name = features[i].properties.name;\n      map.push({\n        name\n      });\n    }\n    const chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      animate: false,\n      padding: 0\n    });\n    chart.tooltip({\n      showTitle: false\n    });\n    // 同步度量\n    chart.scale({\n      longitude: {\n        max: -66,\n        min: -125,\n        sync: true\n      },\n      latitude: {\n        max: 50,\n        min: 24,\n        sync: true\n      }\n    });\n    chart.axis(false);\n    chart.legend('trend', {\n      position: 'left'\n    });\n    const mapDv = new DataSet.View().source(mapData, {\n      type: 'GeoJSON'\n    });\n    mapDv.transform({\n      type: 'map',\n      callback: row => {\n        row.code = row.properties.code;\n        return row;\n      }\n    });\n    const bgView = chart.view();\n    bgView.source(mapDv);\n    bgView.tooltip(false);\n    bgView.polygon()\n      .position('longitude*latitude')\n      .style({\n        fill: '#DDDDDD',\n        stroke: '#b1b1b1',\n        lineWidth: 0.5,\n        fillOpacity: 0.85\n      });\n\n    fetch('../data/flights-airport.json')\n      .then(res => res.json())\n      .then(flights => {\n        const countByAirport = {};\n        let subFlights = [];\n        // 计算飞机的起飞、降落数\n        flights.forEach(function(flight) {\n          const origin = flight.origin,\n            destination = flight.destination;\n          countByAirport[origin] = (countByAirport[origin] || 0) + 1;\n          countByAirport[destination] = (countByAirport[destination] || 0) + 1;\n        });\n        fetch('../data/airport.json')\n          .then(res => res.json())\n          .then(airports => {\n            // Only consider airports with at least one flight.\n            const airportByIata = {};\n            airports = airports.filter(function(airport) {\n              airportByIata[airport.iata] = airport;\n              if (countByAirport[airport.iata]) {\n                airport.count = countByAirport[airport.iata]; // 加入班次数量\n                airport.id = airport.iata;\n                return true;\n              }\n              return null;\n            });\n            flights.forEach(function(flight) {\n              const origin = airportByIata[flight.origin];\n              const destination = airportByIata[flight.destination];\n              flight.longitude = [ origin.longitude, destination.longitude ];\n              flight.latitude = [ origin.latitude, destination.latitude ];\n            });\n            const airView = chart.view();\n            airView.source(airports);\n            airView.point().position('longitude*latitude')\n              .color('rgb(97,145,185)')\n              .shape('circle')\n              .style({\n                stroke: '#eee',\n                lineWidth: 1\n              })\n              .size('count', [ 3, 18 ])\n              .tooltip('iata*count');\n            const flightView = chart.view(); // 飞行路线\n            flightView.tooltip(false);\n            flightView.source(subFlights);\n            flightView.edge()\n              .position('longitude*latitude');\n            chart.render();\n\n            function getFlights(iata) {\n              const rst = [];\n              flights.forEach(function(flight) {\n                if (flight.origin === iata || flight.destination === iata) {\n                  rst.push(flight);\n                }\n              });\n              return rst;\n            }\n\n            let preId;\n            chart.on('plotmove', function(ev) {\n              const records = airView.getSnapRecords({\n                x: ev.x,\n                y: ev.y\n              });\n              if (records.length) {\n                const obj = records[0]._origin;\n                const iata = obj.iata;\n                if (preId !== iata) {\n                  subFlights = getFlights(iata);\n                  flightView.changeData(subFlights);\n                  preId = iata;\n                }\n              }\n            });\n            chart.on('plotleave', function() {\n              if (subFlights.length) {\n                subFlights = [];\n                flightView.changeData([]);\n              }\n            });\n          });\n      });\n  });\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory();\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory();\n    global.withConnection = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function () {\n  \"use strict\";\n\n  fetch('../data/usa.geo.json').then(function (res) {\n    return res.json();\n  }).then(function (mapData) {\n    var map = [];\n    var features = mapData.features; // 获取出所有的地图区域名称\n\n    for (var i = 0; i < features.length; i++) {\n      var name = features[i].properties.name;\n      map.push({\n        name: name\n      });\n    }\n\n    var chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      animate: false,\n      padding: 0\n    });\n    chart.tooltip({\n      showTitle: false\n    }); // 同步度量\n\n    chart.scale({\n      longitude: {\n        max: -66,\n        min: -125,\n        sync: true\n      },\n      latitude: {\n        max: 50,\n        min: 24,\n        sync: true\n      }\n    });\n    chart.axis(false);\n    chart.legend('trend', {\n      position: 'left'\n    });\n    var mapDv = new DataSet.View().source(mapData, {\n      type: 'GeoJSON'\n    });\n    mapDv.transform({\n      type: 'map',\n      callback: function callback(row) {\n        row.code = row.properties.code;\n        return row;\n      }\n    });\n    var bgView = chart.view();\n    bgView.source(mapDv);\n    bgView.tooltip(false);\n    bgView.polygon().position('longitude*latitude').style({\n      fill: '#DDDDDD',\n      stroke: '#b1b1b1',\n      lineWidth: 0.5,\n      fillOpacity: 0.85\n    });\n    fetch('../data/flights-airport.json').then(function (res) {\n      return res.json();\n    }).then(function (flights) {\n      var countByAirport = {};\n      var subFlights = []; // 计算飞机的起飞、降落数\n\n      flights.forEach(function (flight) {\n        var origin = flight.origin,\n            destination = flight.destination;\n        countByAirport[origin] = (countByAirport[origin] || 0) + 1;\n        countByAirport[destination] = (countByAirport[destination] || 0) + 1;\n      });\n      fetch('../data/airport.json').then(function (res) {\n        return res.json();\n      }).then(function (airports) {\n        // Only consider airports with at least one flight.\n        var airportByIata = {};\n        airports = airports.filter(function (airport) {\n          airportByIata[airport.iata] = airport;\n\n          if (countByAirport[airport.iata]) {\n            airport.count = countByAirport[airport.iata]; // 加入班次数量\n\n            airport.id = airport.iata;\n            return true;\n          }\n\n          return null;\n        });\n        flights.forEach(function (flight) {\n          var origin = airportByIata[flight.origin];\n          var destination = airportByIata[flight.destination];\n          flight.longitude = [origin.longitude, destination.longitude];\n          flight.latitude = [origin.latitude, destination.latitude];\n        });\n        var airView = chart.view();\n        airView.source(airports);\n        airView.point().position('longitude*latitude').color('rgb(97,145,185)').shape('circle').style({\n          stroke: '#eee',\n          lineWidth: 1\n        }).size('count', [3, 18]).tooltip('iata*count');\n        var flightView = chart.view(); // 飞行路线\n\n        flightView.tooltip(false);\n        flightView.source(subFlights);\n        flightView.edge().position('longitude*latitude');\n        chart.render();\n\n        function getFlights(iata) {\n          var rst = [];\n          flights.forEach(function (flight) {\n            if (flight.origin === iata || flight.destination === iata) {\n              rst.push(flight);\n            }\n          });\n          return rst;\n        }\n\n        var preId;\n        chart.on('plotmove', function (ev) {\n          var records = airView.getSnapRecords({\n            x: ev.x,\n            y: ev.y\n          });\n\n          if (records.length) {\n            var obj = records[0]._origin;\n            var iata = obj.iata;\n\n            if (preId !== iata) {\n              subFlights = getFlights(iata);\n              flightView.changeData(subFlights);\n              preId = iata;\n            }\n          }\n        });\n        chart.on('plotleave', function () {\n          if (subFlights.length) {\n            subFlights = [];\n            flightView.changeData([]);\n          }\n        });\n      });\n    });\n  });\n});"},{"relativePath":"map/map/demo/with-heatmap.js","absolutePath":"/Users/weixingzhang/workspace/AntV/G2-v4.0/g2-v3/3.5/examples/map/map/demo/with-heatmap.js","order":5,"filename":"with-heatmap.js","title":{"zh":"带热力图的地图","en":"Map"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*g4FWR42ZMpAAAAAAAAAAAABkARQnAQ","source":"fetch('../data/usa.geo.json')\n  .then(res => res.json())\n  .then(GeoJSON => {\n    const userData = [];\n    const geoDv = new DataSet.View().source(GeoJSON, {\n      type: 'GeoJSON'\n    }).transform({\n      type: 'map',\n      callback(row) {\n        userData.push({\n          longitude: row.centroidX,\n          latitude: row.centroidY,\n          name: row.name,\n          value: Math.random() * (1000 - 1)\n        });\n        return row;\n      }\n    });\n\n    const chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      padding: 0\n    });\n    chart.scale({\n      latitude: { sync: true, nice: false },\n      longitude: { sync: true, nice: false }\n    });\n    chart.legend(false);\n    chart.axis(false);\n    chart.tooltip(false);\n\n    const geoView = chart.view();\n    geoView.source(geoDv);\n    geoView.polygon()\n      .position('longitude*latitude')\n      .color('grey')\n      .label('name', {\n        offset: 0\n      });\n\n    const userView = chart.view();\n    userView.source(userData);\n    userView.heatmap()\n      .position('longitude*latitude')\n      .color('value', '#F51D27-#FA541C-#FF8C12-#FFC838-#FAFFA8-#80FF73-#12CCCC-#1890FF-#6E32C2')\n      .size(500 / 20)\n      .style({\n        blur: 500 / 15\n      });\n    chart.render();\n  });\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory();\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory();\n    global.withHeatmap = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function () {\n  \"use strict\";\n\n  fetch('../data/usa.geo.json').then(function (res) {\n    return res.json();\n  }).then(function (GeoJSON) {\n    var userData = [];\n    var geoDv = new DataSet.View().source(GeoJSON, {\n      type: 'GeoJSON'\n    }).transform({\n      type: 'map',\n      callback: function callback(row) {\n        userData.push({\n          longitude: row.centroidX,\n          latitude: row.centroidY,\n          name: row.name,\n          value: Math.random() * (1000 - 1)\n        });\n        return row;\n      }\n    });\n    var chart = new G2.Chart({\n      container: 'container',\n      forceFit: true,\n      height: 500,\n      padding: 0\n    });\n    chart.scale({\n      latitude: {\n        sync: true,\n        nice: false\n      },\n      longitude: {\n        sync: true,\n        nice: false\n      }\n    });\n    chart.legend(false);\n    chart.axis(false);\n    chart.tooltip(false);\n    var geoView = chart.view();\n    geoView.source(geoDv);\n    geoView.polygon().position('longitude*latitude').color('grey').label('name', {\n      offset: 0\n    });\n    var userView = chart.view();\n    userView.source(userData);\n    userView.heatmap().position('longitude*latitude').color('value', '#F51D27-#FA541C-#FF8C12-#FFC838-#FAFFA8-#80FF73-#12CCCC-#1890FF-#6E32C2').size(500 / 20).style({\n      blur: 500 / 15\n    });\n    chart.render();\n  });\n});"}]}}}}