"use strict";

var visit = require("unist-util-visit");

var prettier = require("prettier");

module.exports = function (_ref) {
  var markdownAST = _ref.markdownAST;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return resolveConfig(options).then(function (prettierOptions) {
    visit(markdownAST, "code", function (node) {
      var parser = mapLanguageToParser(node.lang);

      if (parser) {
        var config = Object.assign({
          parser: parser
        }, prettierOptions);

        try {
          var formatted = prettier.format(node.value, config);
          node.value = formatted;
        } catch (err) {
          console.error("error formatting block", err);
        }
      }
    });
  });
};

function resolveConfig(_ref2) {
  var _ref2$usePrettierrc = _ref2.usePrettierrc,
      usePrettierrc = _ref2$usePrettierrc === void 0 ? true : _ref2$usePrettierrc,
      prettierOptions = _ref2.prettierOptions;

  if (usePrettierrc) {
    return prettier.resolveConfig(process.cwd()).then(function (options) {
      return Object.assign({}, options, prettierOptions);
    });
  }

  return Promise.resolve(prettierOptions);
}

function mapLanguageToParser(language) {
  switch (language) {
    case "javascript":
      return "babylon";

    case "typescript":
      return "typescript";

    case "flow":
      return "flow";

    case "css":
    case "scss":
      return "css";

    case "json":
      return "json";

    case "graphql":
      return "graphql";

    case "markdown":
      return "markdown";

    default:
      return null;
  }
}